{"version":3,"file":"data-fns.cjs.production.min.js","sources":["../src/lib/getItemCyclic.ts","../src/lib/offset.ts","../src/lib/patternChunks.ts","../src/lib/replaceAt.ts","../src/lib/times.ts"],"sourcesContent":["export const getItemCyclic = <T>(index: number, array: Array<T>): T => {\n  const id = index % array.length\n  return array[id]\n}\n","export const offset = <T extends Array<any>>(list: T, amount: number): T => {\n  return [...list.slice(amount), ...list.slice(0, amount)] as T\n}\n","import { getItemCyclic } from './getItemCyclic'\n\nexport const patternChunks = <T>(array: Array<T>, pattern: Array<number>): Array<Array<T>> => {\n  const result: Array<Array<T>> = []\n  const _array = [...array]\n  let i = 0\n\n  while (_array.length > 0) {\n    result.push(_array.splice(0, getItemCyclic(i, pattern)))\n    i++\n  }\n\n  return result\n}\n","export const replaceAt = <A>(\n  array: Array<A>,\n  index: number,\n  replacementFn: (item: A) => A\n): Array<A> => {\n  const item = array[index]\n\n  return array\n    .slice(0, index)\n    .concat([replacementFn(item)])\n    .concat(array.slice(index + 1))\n}\n","export const times = <T>(iterations: number, callback: (index: number) => T): Array<T> => {\n  let result: Array<T> = []\n  \n  for (let i=0; i < iterations; i++) {\n      result.push(callback(i));\n  }\n  \n  return result\n}"],"names":["getItemCyclic","index","array","length","list","amount","slice","pattern","result","_array","i","push","splice","replacementFn","item","concat","iterations","callback"],"mappings":"wEAAaA,EAAgB,SAAIC,EAAeC,UAEvCA,EADID,EAAQC,EAAMC,gDCDL,SAAuBC,EAASC,mBACzCD,EAAKE,MAAMD,GAAYD,EAAKE,MAAM,EAAGD,2BCCrB,SAAIH,EAAiBK,WAC1CC,EAA0B,GAC1BC,YAAaP,GACfQ,EAAI,EAEDD,EAAON,OAAS,GACrBK,EAAOG,KAAKF,EAAOG,OAAO,EAAGZ,EAAcU,EAAGH,KAC9CG,WAGKF,qBCZgB,SACvBN,EACAD,EACAY,OAEMC,EAAOZ,EAAMD,UAEZC,EACJI,MAAM,EAAGL,GACTc,OAAO,CAACF,EAAcC,KACtBC,OAAOb,EAAMI,MAAML,EAAQ,mBCVX,SAAIe,EAAoBC,WACvCT,EAAmB,GAEdE,EAAE,EAAGA,EAAIM,EAAYN,IAC1BF,EAAOG,KAAKM,EAASP,WAGlBF"}